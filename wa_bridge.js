    // === WhatsApp Bridge ===
    // –°–≤—è–∑—É—é—â–µ–µ –∑–≤–µ–Ω–æ –º–µ–∂–¥—É Django –∏ WhatsApp (—á–µ—Ä–µ–∑ whatsapp-web.js)

    import express from "express";
    import fetch from "node-fetch";
    import QRCode from "qrcode";
    import cors from "cors";
    import pkg from "whatsapp-web.js";
    const { Client, LocalAuth } = pkg;

    const app = express();
    app.use(cors());
    app.use(express.json());

    const PORT = process.env.PORT || 3001;

    // Django API URLs
    const djangoIncoming = "https://usersiteai.pythonanywhere.com/dashboard/api/wa/message_in/"; // –≤—Ö–æ–¥—è—â–∏–µ
    const djangoSend = "https://usersiteai.pythonanywhere.com/dashboard/api/wa/send/"; // (—Ä–µ–∑–µ—Ä–≤)

    const clients = {}; // username -> { client, qr, ready }

    // ==========================
    // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    // ==========================
    function createClient(username) {
        if (clients[username]) return clients[username];

        console.log(`\n[üß©] –°–æ–∑–¥–∞—é –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
        const client = new Client({
            authStrategy: new LocalAuth({ clientId: username }),
            puppeteer: {
                headless: true,
                args: [
                    "--no-sandbox",
                    "--disable-gpu",
                    "--disable-setuid-sandbox",
                    "--disable-dev-shm-usage",
                ],
            },
        });

        // QR-–∫–æ–¥
        client.on("qr", async qr => {
            console.log(`[QR] –ù–æ–≤—ã–π QR –¥–ª—è ${username}`);
            try {
                const dataUrl = await QRCode.toDataURL(qr); // <-- —Å–æ–∑–¥–∞—ë—Ç –≥–æ—Ç–æ–≤—ã–π PNG –≤ base64
                clients[username].qr = dataUrl;
            } catch (err) {
                console.error(`[‚ùå] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: ${err.message}`);
            }
        });


        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        client.on("authenticated", () => {
            console.log(`[üîê] ${username}: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ`);
        });

        client.on("ready", () => {
            console.log(`[‚úÖ] ${username}: –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`);
            clients[username].ready = true;
            clients[username].qr = null; // QR –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        });

        // –û—à–∏–±–∫–∏
        client.on("auth_failure", msg => {
            console.error(`[‚ùå] ${username}: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (${msg})`);
        });

        client.on("disconnected", reason => {
            console.log(`[‚ö†Ô∏è] ${username}: –æ—Ç–∫–ª—é—á–µ–Ω (${reason})`);
            clients[username].ready = false;
            clients[username].qr = null;
        });

        // –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        client.on("message", async msg => {
            console.log(`[üí¨] ${username} <- ${msg.from}: ${msg.body}`);
            try {
                const payload = {
                    user: username,
                    from: msg.from,
                    body: msg.body,
                    timestamp: msg.timestamp,
                };
                const res = await fetch(djangoIncoming, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(payload),
                });
                if (!res.ok) throw new Error(`Django response ${res.status}`);
                console.log(`[‚û°Ô∏è] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Django (${msg.from})`);
            } catch (err) {
                console.error(`[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Django: ${err.message}`);
            }
        });

        client.initialize();

        clients[username] = { client, qr: null, ready: false };
        return clients[username];
    }

    // ==========================
    // API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    // ==========================

    // –ü–æ–ª—É—á–∏—Ç—å QR-–∫–æ–¥
    app.get("/qr", async (req, res) => {
        const username = req.query.user;
        if (!username) return res.json({ error: "missing user" });

        const clientObj = createClient(username);
        if (clientObj.ready) {
            return res.json({ status: "connected" });
        }

        if (clientObj.qr) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É QR (–Ω–µ base64-–∫–∞—Ä—Ç–∏–Ω–∫—É!)
            return res.json({ qr: clientObj.qr });
        } else {
            return res.json({ error: "QR not ready" });
        }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    app.get("/status", (req, res) => {
        const username = req.query.user;
        if (!username) return res.json({ error: "missing user" });

        const clientObj = clients[username];
        const connected = !!(clientObj && clientObj.ready);
        res.json({ connected });
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Django
    app.post("/send", async (req, res) => {
        const { user, to, text } = req.body;
        if (!user || !to || !text) return res.json({ error: "missing params" });

        const clientObj = clients[user];
        if (!clientObj || !clientObj.ready)
            return res.json({ error: "client not connected" });

        try {
            const sent = await clientObj.client.sendMessage(to, text);
            console.log(`[üì§] ${user} -> ${to}: ${text}`);
            res.json({ success: true, id: sent.id.id });
        } catch (err) {
            console.error(`[‚ùå] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${err.message}`);
            res.json({ error: err.message });
        }
    });

    // ==========================
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    // ==========================
    app.listen(PORT, () =>
        console.log(`üöÄ WhatsApp Bridge –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`)
    );
